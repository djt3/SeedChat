// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/Server.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace SeedChat {
  public static partial class ChatServer
  {
    static readonly string __ServiceName = "SeedChat.ChatServer";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::SeedChat.EmptyMessage> __Marshaller_SeedChat_EmptyMessage = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::SeedChat.EmptyMessage.Parser));
    static readonly grpc::Marshaller<global::SeedChat.CodedResponse> __Marshaller_SeedChat_CodedResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::SeedChat.CodedResponse.Parser));
    static readonly grpc::Marshaller<global::SeedChat.SeedRequest> __Marshaller_SeedChat_SeedRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::SeedChat.SeedRequest.Parser));
    static readonly grpc::Marshaller<global::SeedChat.StoreRequest> __Marshaller_SeedChat_StoreRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::SeedChat.StoreRequest.Parser));
    static readonly grpc::Marshaller<global::SeedChat.Message> __Marshaller_SeedChat_Message = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::SeedChat.Message.Parser));
    static readonly grpc::Marshaller<global::SeedChat.NodeResponse> __Marshaller_SeedChat_NodeResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::SeedChat.NodeResponse.Parser));

    static readonly grpc::Method<global::SeedChat.EmptyMessage, global::SeedChat.CodedResponse> __Method_Ping = new grpc::Method<global::SeedChat.EmptyMessage, global::SeedChat.CodedResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Ping",
        __Marshaller_SeedChat_EmptyMessage,
        __Marshaller_SeedChat_CodedResponse);

    static readonly grpc::Method<global::SeedChat.SeedRequest, global::SeedChat.CodedResponse> __Method_RequestSeed = new grpc::Method<global::SeedChat.SeedRequest, global::SeedChat.CodedResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RequestSeed",
        __Marshaller_SeedChat_SeedRequest,
        __Marshaller_SeedChat_CodedResponse);

    static readonly grpc::Method<global::SeedChat.StoreRequest, global::SeedChat.CodedResponse> __Method_RequestStore = new grpc::Method<global::SeedChat.StoreRequest, global::SeedChat.CodedResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RequestStore",
        __Marshaller_SeedChat_StoreRequest,
        __Marshaller_SeedChat_CodedResponse);

    static readonly grpc::Method<global::SeedChat.Message, global::SeedChat.CodedResponse> __Method_SendMessage = new grpc::Method<global::SeedChat.Message, global::SeedChat.CodedResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SendMessage",
        __Marshaller_SeedChat_Message,
        __Marshaller_SeedChat_CodedResponse);

    static readonly grpc::Method<global::SeedChat.EmptyMessage, global::SeedChat.NodeResponse> __Method_GetNodes = new grpc::Method<global::SeedChat.EmptyMessage, global::SeedChat.NodeResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetNodes",
        __Marshaller_SeedChat_EmptyMessage,
        __Marshaller_SeedChat_NodeResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::SeedChat.ServerReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of ChatServer</summary>
    [grpc::BindServiceMethod(typeof(ChatServer), "BindService")]
    public abstract partial class ChatServerBase
    {
      public virtual global::System.Threading.Tasks.Task<global::SeedChat.CodedResponse> Ping(global::SeedChat.EmptyMessage request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::SeedChat.CodedResponse> RequestSeed(global::SeedChat.SeedRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::SeedChat.CodedResponse> RequestStore(global::SeedChat.StoreRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::SeedChat.CodedResponse> SendMessage(global::SeedChat.Message request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task GetNodes(global::SeedChat.EmptyMessage request, grpc::IServerStreamWriter<global::SeedChat.NodeResponse> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for ChatServer</summary>
    public partial class ChatServerClient : grpc::ClientBase<ChatServerClient>
    {
      /// <summary>Creates a new client for ChatServer</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public ChatServerClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ChatServer that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public ChatServerClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected ChatServerClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected ChatServerClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::SeedChat.CodedResponse Ping(global::SeedChat.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Ping(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::SeedChat.CodedResponse Ping(global::SeedChat.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Ping, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::SeedChat.CodedResponse> PingAsync(global::SeedChat.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PingAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::SeedChat.CodedResponse> PingAsync(global::SeedChat.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Ping, null, options, request);
      }
      public virtual global::SeedChat.CodedResponse RequestSeed(global::SeedChat.SeedRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RequestSeed(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::SeedChat.CodedResponse RequestSeed(global::SeedChat.SeedRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RequestSeed, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::SeedChat.CodedResponse> RequestSeedAsync(global::SeedChat.SeedRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RequestSeedAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::SeedChat.CodedResponse> RequestSeedAsync(global::SeedChat.SeedRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RequestSeed, null, options, request);
      }
      public virtual global::SeedChat.CodedResponse RequestStore(global::SeedChat.StoreRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RequestStore(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::SeedChat.CodedResponse RequestStore(global::SeedChat.StoreRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RequestStore, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::SeedChat.CodedResponse> RequestStoreAsync(global::SeedChat.StoreRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RequestStoreAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::SeedChat.CodedResponse> RequestStoreAsync(global::SeedChat.StoreRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RequestStore, null, options, request);
      }
      public virtual global::SeedChat.CodedResponse SendMessage(global::SeedChat.Message request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendMessage(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::SeedChat.CodedResponse SendMessage(global::SeedChat.Message request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SendMessage, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::SeedChat.CodedResponse> SendMessageAsync(global::SeedChat.Message request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SendMessageAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::SeedChat.CodedResponse> SendMessageAsync(global::SeedChat.Message request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SendMessage, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::SeedChat.NodeResponse> GetNodes(global::SeedChat.EmptyMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetNodes(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::SeedChat.NodeResponse> GetNodes(global::SeedChat.EmptyMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetNodes, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override ChatServerClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ChatServerClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(ChatServerBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Ping, serviceImpl.Ping)
          .AddMethod(__Method_RequestSeed, serviceImpl.RequestSeed)
          .AddMethod(__Method_RequestStore, serviceImpl.RequestStore)
          .AddMethod(__Method_SendMessage, serviceImpl.SendMessage)
          .AddMethod(__Method_GetNodes, serviceImpl.GetNodes).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, ChatServerBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Ping, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::SeedChat.EmptyMessage, global::SeedChat.CodedResponse>(serviceImpl.Ping));
      serviceBinder.AddMethod(__Method_RequestSeed, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::SeedChat.SeedRequest, global::SeedChat.CodedResponse>(serviceImpl.RequestSeed));
      serviceBinder.AddMethod(__Method_RequestStore, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::SeedChat.StoreRequest, global::SeedChat.CodedResponse>(serviceImpl.RequestStore));
      serviceBinder.AddMethod(__Method_SendMessage, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::SeedChat.Message, global::SeedChat.CodedResponse>(serviceImpl.SendMessage));
      serviceBinder.AddMethod(__Method_GetNodes, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::SeedChat.EmptyMessage, global::SeedChat.NodeResponse>(serviceImpl.GetNodes));
    }

  }
}
#endregion
